import streamlit as st
import pandas as pd
import joblib
from sklearn.metrics import classification_report
import os
from openai import OpenAI
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è FLAN (–ø—Ä–∏–º–µ—Ä, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é)
from local_flant5 import get_local_label

def get_gpt_label(
    text: str,
    system_prompt: str = "–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞: positive, negative –∏–ª–∏ neutral.",
    api_key: str = None
) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ GPT-3.5 –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç.
    –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞—Ç—å api_key, –µ—Å–ª–∏ –æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏.
    """
    try:
        key = api_key or os.getenv("OPENAI_API_KEY")
        if not key:
            return "–û—à–∏–±–∫–∞: API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω."

        client = OpenAI(api_key=key)

        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": text}
            ],
            temperature=0.3
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è ML –º–æ–¥–µ–ª–∏
def load_ml_model():
    try:
        model = joblib.load("sentiment_classifier.pkl")
        return model
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ML –º–æ–¥–µ–ª–∏: {e}")
        return None

st.set_page_config(page_title="–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Ä–∞–∑–º–µ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞", layout="centered")
st.title("üß† –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Ä–∞–∑–º–µ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞")

option = st.radio(
    "–í—ã–±–µ—Ä–∏ –º–µ—Ç–æ–¥ —Ä–∞–∑–º–µ—Ç–∫–∏:",
    ("FLAN (–±–∏–Ω–∞—Ä–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è)", "ML –º–æ–¥–µ–ª—å", "GPT-3.5 via OpenAI API (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ)")
)

# ==== FLAN ====
if option == "FLAN (–±–∏–Ω–∞—Ä–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è)":
    user_input = st.text_area("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", height=200)
    if st.button("–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É"):
        if user_input.strip() == "":
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç.")
        else:
            with st.spinner("–ú–æ–¥–µ–ª—å —Ä–∞–∑–º–µ—á–∞–µ—Ç..."):
                try:
                    label = get_local_label(user_input)
                    st.success(f"–ú–µ—Ç–∫–∞ –æ—Ç FLAN –º–æ–¥–µ–ª–∏: **{label}**")
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—Ç–∫–µ: {e}")

    st.markdown("---")
    st.subheader("üìÑ –ü–∞–∫–µ—Ç–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞ –¥–ª—è FLAN")

    uploaded_file_flan = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏ CSV —Å –∫–æ–ª–æ–Ω–∫–æ–π 'text'", type=["csv"], key="flan_label_csv")

    if uploaded_file_flan:
        try:
            df_flan = pd.read_csv(uploaded_file_flan)
            if 'text' not in df_flan.columns:
                st.error("CSV –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É 'text'.")
            else:
                st.write("–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:")
                st.dataframe(df_flan.head())

                if st.button("–†–∞–∑–º–µ—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ (FLAN)"):
                    with st.spinner("–ü–∞–∫–µ—Ç–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞..."):
                        df_flan["predicted_label"] = df_flan["text"].apply(get_local_label)
                        st.success("–ü–∞–∫–µ—Ç–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                        st.dataframe(df_flan.head())

                        csv = df_flan.to_csv(index=False).encode('utf-8')
                        st.download_button("üì• –°–∫–∞—á–∞—Ç—å CSV", data=csv, file_name="flan_labeled_data.csv", mime="text/csv")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")

# ==== ML –º–æ–¥–µ–ª—å ====
# ==== ML –º–æ–¥–µ–ª—å ====
elif option == "ML –º–æ–¥–µ–ª—å":
    st.subheader("üìä –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏")

    uploaded_file_eval = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏ CSV —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ 'text' –∏ 'label' –¥–ª—è –æ—Ü–µ–Ω–∫–∏", type=["csv"], key="ml_eval_csv"
    )

    if uploaded_file_eval:
        try:
            df_eval = pd.read_csv(uploaded_file_eval)
            if not {'text', 'label'}.issubset(df_eval.columns):
                st.error("CSV –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ 'text' –∏ 'label'.")
            else:
                st.write("–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –æ—Ü–µ–Ω–∫–∏:")
                st.dataframe(df_eval.head())

                model = load_ml_model()
                if model is None:
                    st.stop()

                if st.button("–û—Ü–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å"):
                    with st.spinner("–û—Ü–µ–Ω–∏–≤–∞–µ–º..."):
                        y_true = df_eval["label"]
                        y_pred = model.predict(df_eval["text"])
                        report = classification_report(y_true, y_pred, output_dict=True)

                        st.subheader("–û—Ç—á—ë—Ç –ø–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                        st.text(classification_report(y_true, y_pred))

                        df_report = pd.DataFrame(report).transpose()
                        st.dataframe(df_report)

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ: {e}")

    st.markdown("---")
    st.subheader("üìÑ –ü–∞–∫–µ—Ç–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞")

    uploaded_file_predict = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏ CSV —Å –∫–æ–ª–æ–Ω–∫–æ–π 'text' –¥–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏", type=["csv"], key="ml_predict_csv"
    )

    if uploaded_file_predict:
        try:
            df_pred = pd.read_csv(uploaded_file_predict)
            if 'text' not in df_pred.columns:
                st.error("CSV –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É 'text'.")
            else:
                st.write("–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏:")
                st.dataframe(df_pred.head())

                model = load_ml_model()
                if model is None:
                    st.stop()

                if st.button("–†–∞–∑–º–µ—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç (ML –º–æ–¥–µ–ª—å)"):
                    with st.spinner("–†–∞–∑–º–µ—Ç–∫–∞..."):
                        df_pred["predicted_label"] = model.predict(df_pred["text"])
                        st.success("–†–∞–∑–º–µ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                        st.dataframe(df_pred.head())

                        csv = df_pred.to_csv(index=False).encode('utf-8')
                        st.download_button(
                            "üì• –°–∫–∞—á–∞—Ç—å —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã–π CSV",
                            data=csv,
                            file_name="ml_labeled_data.csv",
                            mime="text/csv"
                        )
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—Ç–∫–µ: {e}")
    
# ==== GPT-3.5 API ====
elif option == "GPT-3.5 via OpenAI API (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ)":
    st.warning("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è API-–∫–ª—é—á OpenAI. –ú–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –∑–¥–µ—Å—å.")

    env_api_key = os.getenv("OPENAI_API_KEY")
    if env_api_key:
        st.info("API –∫–ª—é—á –≤–∑—è—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

    user_api_key = st.text_input("–í–≤–µ–¥–∏ —Å–≤–æ–π OpenAI API –∫–ª—é—á (–µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏):", type="password", value="" if env_api_key else "")

    user_input = st.text_area("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", height=200)

    api_key_to_use = user_api_key if user_api_key.strip() else env_api_key

    if st.button("–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É –æ—Ç GPT"):
        if not api_key_to_use or not user_input.strip():
            st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ API-–∫–ª—é—á –∏ —Ç–µ–∫—Å—Ç.")
        else:
            try:
                with st.spinner("GPT —Ä–∞–∑–º–µ—á–∞–µ—Ç..."):
                    label = get_gpt_label(user_input, api_key=api_key_to_use)
                    st.success(f"–ú–µ—Ç–∫–∞ –æ—Ç GPT: **{label}**")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT: {e}")

    st.markdown("---")
    st.subheader("üìÑ –ü–∞–∫–µ—Ç–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞ —á–µ—Ä–µ–∑ GPT")

    uploaded_file_gpt = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏ CSV —Å –∫–æ–ª–æ–Ω–∫–æ–π 'text'", type=["csv"], key="gpt_csv")

    if uploaded_file_gpt:
        try:
            df_gpt = pd.read_csv(uploaded_file_gpt)
            if 'text' not in df_gpt.columns:
                st.error("CSV –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É 'text'.")
            else:
                st.write("–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:")
                st.dataframe(df_gpt.head())

                if st.button("–†–∞–∑–º–µ—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ GPT"):
                    if not api_key_to_use:
                        st.error("API-–∫–ª—é—á –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.")
                    else:
                        with st.spinner("–†–∞–∑–º–µ—Ç–∫–∞ —á–µ—Ä–µ–∑ GPT..."):
                            df_gpt["predicted_label"] = df_gpt["text"].apply(
                                lambda x: get_gpt_label(x, api_key=api_key_to_use)
                            )
                            st.success("–†–∞–∑–º–µ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                            st.dataframe(df_gpt.head())

                            csv = df_gpt.to_csv(index=False).encode('utf-8')
                            st.download_button("üì• –°–∫–∞—á–∞—Ç—å CSV", data=csv, file_name="gpt_labeled_data.csv", mime="text/csv")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–∫–µ—Ç–Ω–æ–π —Ä–∞–∑–º–µ—Ç–∫–µ —á–µ—Ä–µ–∑ GPT: {e}")